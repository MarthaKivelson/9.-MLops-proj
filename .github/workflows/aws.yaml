# .github/workflows/aws.yml
name: Build and Deploy to Amazon ECR and EC2

# Use top-level env variables for values shared across jobs
env:
  AWS_REGION: us-east-1                   # <<< SET YOUR AWS REGION
  ECR_REPOSITORY: vehicleproj      # <<< SET YOUR ECR REPOSITORY NAME

on:
  push:
    branches: [main]

jobs:
  # ===================================================
  # JOB 1: Build and Push Docker Image to Amazon ECR
  # ===================================================
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    # Use OIDC for secure, keyless authentication with AWS
    permissions:
      id-token: write   # Required to request an OIDC token from GitHub
      contents: read    # Required for actions/checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use role-based authentication instead of static keys
          role-to-assume: arn:aws:iam::907986008617:role/GitHubActions-ECR-Role # <<< SET YOUR ROLE ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================================
  # JOB 2: Deploy Docker Image on Self-Hosted EC2 Runner
  # ===================================================
  deploy:
    name: Deploy to EC2
    needs: build-and-push # This job runs only after the build-and-push job succeeds
    runs-on: self-hosted  # This job runs on your EC2 instance

    steps:
      - name: Pull latest image from Amazon ECR
        run: |
          # The self-hosted runner needs AWS credentials to pull from a private ECR repo.
          # This should be configured via an IAM Instance Profile on the EC2 machine for security.
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
        
      - name: Stop and remove existing container
        run: |
          # Stop and remove the old container if it exists to avoid port conflicts
          docker stop my-app-container || true
          docker rm my-app-container || true

      - name: Run new Docker container
        run: |
          # Run the new container.
          # CRITICAL: Do NOT pass AWS credentials as environment variables.
          # The application inside the container will get credentials from the EC2 Instance Profile.
          docker run \
            --name my-app-container \
            -d \
            --restart always \
            -e MONGODB_URL="${{ secrets.MONGODB_URL }}" \
            -p 5000:5000 \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
